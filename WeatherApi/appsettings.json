{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "System.Net.Http.HttpClient": "Warning"

    }
  },
  "AllowedHosts": "*",

  "OpenweathermapApi": {
    "ApiKey": "api key here"
  },

  "Historicaldb": {
    "Enabled": true,
    "Sqlite": "Data Source=historicwt.db;", //connection string
    "MeteoProvider": "OM", // OM : openmeteo , OWM : Openweathermeteo // provider to use for fetching (Historicaldb logic only)
    //"TimeToFetch": "18:50",  // TIME TRIGGERED AT 00:00 no matter what 
    //// This is the offset date set when the application launches. 
    //// The program waits for this specific time before triggering the main loop logic (configurable in the code).
    //// Workflow:
    //// - Application starts --> App records the current time and waits until the offset time is reached(TimetoFetch). 
    //// - Once the time is triggered (one-time event), it configures the loop (also configurable in the code). 
    //// Example:
    //// If this time is set to 00:00 and the current time is 22:30, the app waits 1 hour and 30 minutes, 
    //// then triggers the main loop. 
    //// The main loop logic perform actions like daily(timing configurable in the code) data fetching .


    "GeolocationsLat": [ "44.40", "41.89" ], // these latitude values are fetched at {TimetoFetch} and saved in the historical database
    "GeolocationsLon": [ "8.93", "12.48" ] //  city1 correspond to GeolocationsLat[0] and GeolocationsLot[0].

  },


  "ConnectionStrings": {
    "Redis": "redis:6379"
  }

}
